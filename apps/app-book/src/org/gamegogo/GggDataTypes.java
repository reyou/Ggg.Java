//=============================================================================
package org.gamegogo;

import static java.lang.Math.*;
// shortcuts
// ctrl + . => collapse open block

public class GggDataTypes {

    public static void main(String[] args) {
        GggDataTypes gggDataTypes = new GggDataTypes();
        gggDataTypes.FloatingPointLiterals();
        DynInit dynInit = new DynInit();
        dynInit.DynInitFun();
    }

    // Demonstrate dynamic initialization.
    static class DynInit {
        public void DynInitFun() {
            System.out.println("DynInitFun");
            double a = 3.0, b = 4.0;
            // c is dynamically initialized
            double c = sqrt(a * a + b * b);
            System.out.println("Hypotenuse is " + c);
            System.out.println("DynInitFun");
        }
    }


    public void VariablesFun() {
        // declares three ints, a, b, and c.
        int a, b, c;
        // declares three more ints, initializing
// d and f.
        int d = 3, e, f = 5;
        // initializes z.
        byte z = 22;
        // declares an approximation of pi.
        double pi = 3.14159;
        // the variable x has the value 'x'.
        char x = 'x';

    }

    // Floating-Point Literals
    public void FloatingPointLiterals() {
        System.out.println("FloatingPointLiterals");
        // the value given to num will be 9,423,497,862.0.
        double num = 9_423_497_862.0;
        System.out.println("num: " + num);
        // In this case, the fractional part is .109.
        double num2 = 9_423_497.1_0_9;
        System.out.println("num2: " + num2);
        System.out.println("");
    }

    public GggDataTypes() {

        // The smallest integer type is byte. This is a signed 8-bit type
        // that has a range from –128 to 127. Variables of type byte are
        // especially useful when you’re working with a stream of data
        // from a network or file.
        byte b, c;
        /*short is a signed 16-bit type. It has a range from –32,768
        to 32,767. It is probably the least-used Java type. Here are
        some examples of short variable declarations:*/
        short s;
        short t;
        /*The most commonly used integer type is int. It is a
        signed 32-bit type that has a range from
        –2,147,483,648 to 2,147,483,647. */
        int intFun;
        /*The type float specifies a single-precision value that uses
        32 bits of storage. Single precision is faster on some processors
        and takes half as much space as double precision, but will become
        imprecise when the values are either very large or very small.
        Variables of type float are useful when you need a fractional component,
        but don’t require a large degree of precision. For example, float
        can be useful when representing dollars and cents.*/
        float hightemp, lowtemp;
        /*Also beginning with JDK 7, you can embed one or more underscores
        in an integer literal. Doing so makes it easier to read large
        integer literals. When the literal is compiled, the underscores
        are discarded. */
        // The value given to x will be 123,456,789.
        // The underscores will be ignored. Underscores can
        // only be used to separate digits. They cannot come at the beginning
        // or the end of a literal.
        int x = 123_456_789;
        // binary values are often visually grouped in four-digits units,
        // as shown here:
        int x1 = 0b1101_0101_0001_1010;

    }

    // Demonstrate boolean values.
    /*The output generated by this program is shown here:
b is false
b is true
This is executed.
10 > 9 is true
*/
    class BoolTest {
        public BoolTest() {
            boolean b;
            b = false;
            System.out.println("b is " + b);
            b = true;
            System.out.println("b is " + b);
// a boolean value can control the if statement
            if (b) System.out.println("This is executed.");
            b = false;
            if (b) System.out.println("This is not executed.");
// outcome of a relational operator is a boolean value
            System.out.println("10 > 9 is " + (10 > 9));
        }
    }

    // char variables behave like integers.
    /*The output generated by this program is shown here:
     ch1 contains X
     ch1 is now Y
     */
    class CharDemo2 {
        public CharDemo2() {
            char ch1;
            ch1 = 'X';
            System.out.println("ch1 contains " + ch1);
            ch1++; // increment ch1
            System.out.println("ch1 is now " + ch1);
        }
    }

    // Demonstrate char data type.
    /*This program displays the following output:
    ch1 and ch2: X Y
    */
    class CharDemo {
        /*At the time of Java's creation, Unicode required
    16 bits. Thus, in Java char is a 16-bit type. The range of a char
    is 0 to 65,536. There are no negative chars. */
        public CharDemo() {
            char ch1, ch2;
            ch1 = 88; // code for X
            ch2 = 'Y';
            System.out.print("ch1 and ch2: ");
            System.out.println(ch1 + " " + ch2);
        }
    }


    // Compute distance light travels using long variables.
    class Light {
        public Light() {
            /*long is a signed 64-bit type and is useful for those
        occasions where an int type is not large enough to hold the
        desired value. The range of a long is quite large. */
            int lightspeed;
            long days;
            long seconds;
            long distance;
            // approximate speed of light in miles per second
            lightspeed = 186000;
            days = 1000; // specify number of days here
            seconds = days * 24 * 60 * 60; // convert to seconds
            distance = lightspeed * seconds; // compute distance
            System.out.print("In " + days);
            System.out.print(" days light will travel about ");
            System.out.println(distance + " miles.");
        }
    }

    // Compute the area of a circle.
    class Area {
        public Area() {
            /*Double precision, as denoted by the double keyword,
            uses 64 bits to store a value. Double precision is actually
            faster than single precision on some modern processors that
            have been optimized for high-speed mathematical calculations.
            All transcendental math functions, such as sin( ), cos( )
            , and sqrt( ), return double values. When you need to
            maintain accuracy over many iterative calculations,
            or are manipulating large-valued numbers, double is the
best choice.*/
            double pi, r, a;
            r = 10.8; // radius of circle
            pi = 3.1416; // pi, approximately
            a = pi * r * r; // compute area
            System.out.println("Area of circle is " + a);
        }
    }
}
